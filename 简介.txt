Swing窗体结构说明
================

1. 基本容器结构
---------------
JFrame（主窗口）
    ├── JMenuBar（菜单栏，可选）
    ├── ContentPane（内容面板）
    │   ├── JPanel（面板，用于组织组件）
    │   │   ├── 其他组件
    │   │   └── 其他面板
    │   └── 直接添加的组件
    └── 其他容器组件

2. 常用组件类型
---------------
2.1 显示类组件
    - JLabel：显示文本或图片
    - JTextArea：多行文本显示/输入
    - JTextField：单行文本输入
    - JTextPane：富文本显示
    - JEditorPane：HTML显示

2.2 交互类组件
    - JButton：按钮
    - JCheckBox：复选框
    - JRadioButton：单选按钮
    - JComboBox：下拉列表
    - JList：列表
    - JTable：表格
    - JTree：树形结构

2.3 容器类组件
    - JPanel：面板
    - JScrollPane：滚动面板
    - JSplitPane：分割面板
    - JTabbedPane：选项卡面板
    - JToolBar：工具栏

3. 组件关系
-----------
3.1 父子关系
    - 容器组件可以包含其他组件
    - 组件必须添加到容器中才能显示
    - 一个组件只能有一个父容器，即每一个组件在同一时刻只能被添加到一个容器当中

3.2 布局关系
    - 组件在容器中的位置由布局管理器决定
    - 常用布局管理器：
        * BorderLayout：边界布局
        * FlowLayout：流式布局
        * GridLayout：网格布局
        * GridBagLayout：网格包布局
        * CardLayout：卡片布局

4. 组件使用指南
---------------
4.1 创建组件
    ```java
    // 创建按钮
    JButton button = new JButton("点击");
    
    // 创建文本区域
    JTextArea textArea = new JTextArea(10, 30);
    
    // 创建面板
    JPanel panel = new JPanel();
    ```

4.2 设置组件属性
    ```java
    // 设置大小
    component.setSize(width, height);
    
    // 设置位置
    component.setLocation(x, y);
    
    // 设置字体
    component.setFont(new Font("微软雅黑", Font.PLAIN, 14));
    
    // 设置颜色
    component.setBackground(Color.WHITE);
    component.setForeground(Color.BLACK);
    ```

4.3 添加组件到容器
    ```java
    // 直接添加
    container.add(component);
    
    // 使用布局管理器添加
    container.add(component, BorderLayout.CENTER);
    ```

4.4 事件处理
    ```java
    // 按钮点击事件
    button.addActionListener(e -> {
        // 处理点击事件
    });
    
    // 文本变化事件
    textField.getDocument().addDocumentListener(new DocumentListener() {
        public void changedUpdate(DocumentEvent e) { }
        public void insertUpdate(DocumentEvent e) { }
        public void removeUpdate(DocumentEvent e) { }
    });
    ```

5. 最佳实践
-----------
5.1 组件组织
    - 使用JPanel组织相关组件
    - 合理使用布局管理器
    - 避免过深的组件嵌套

5.2 事件处理
    - 使用匿名内部类或Lambda表达式
    - 保持事件处理代码简洁
    - 避免在事件处理中执行耗时操作

5.3 线程安全
    - 使用SwingUtilities.invokeLater()更新GUI
    - 避免在非EDT线程中修改GUI组件
    - EDT是swing组件中自带的线程，只需要把所有界面相关的操作都放在EDT线程中执行就行

6. 示例代码
-----------
```java
public class SimpleWindow extends JFrame {
    public SimpleWindow() {
        // 设置窗口属性
        setTitle("简单窗口");
        setSize(300, 200);
        setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);
        
        // 创建面板
        JPanel panel = new JPanel();
        panel.setLayout(new FlowLayout());
        
        // 添加组件
        JLabel label = new JLabel("你好，Swing！");
        JButton button = new JButton("点击");
        
        panel.add(label);
        panel.add(button);
        
        // 添加面板到窗口
        add(panel);
        
        // 显示窗口
        setVisible(true);
    }
}
```

7. 注意事项
-----------
- 所有GUI操作必须在EDT线程中执行
- 合理使用布局管理器，避免使用绝对定位
- 注意组件的生命周期管理
- 保持界面简洁清晰
- 考虑用户体验